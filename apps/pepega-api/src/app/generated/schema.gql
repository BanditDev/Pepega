# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthTokens {
  refreshToken: String!
  accessToken: String!
}

type Channel {
  id: String!
  name: String!
  avatar: String
  title: String
  cost: Int!
  live: Boolean!
}

type ChannelPromoter {
  id: String!
  uniqKey: String!
  active: Boolean!
  cost: Int!
  channelId: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ChannelPromoterWhereUniqueInput {
  id: String
}

input ChannelWhereUniqueInput {
  id: String
}

type ChatMessage {
  id: String!
  content: String!
  chatId: String!
  authorId: String!
  author: User!
  createdAt: String!
}

input ChatMessageCreateInput {
  text: String!
  chatId: String!
}

type Clip {
  id: String!
  sourceUrl: String!
  title: String!
  thumbnail_url: String!
  language: String!
  broadcaster_id: String!
  creator_id: String!
  video_id: String!
  game_id: String!
  created_at: String!
  createdAt: String!
  updatedAt: String!
  watched: Boolean!
  reactionStats: ClipReactionStats!
  channel: Channel!
  communityClips: [CommunityClip!]!
}

type ClipComment {
  id: String!
  content: String!
  authorId: String!
  author: User!
  clipId: String!
  createdAt: String!
}

input ClipCommentCreateInput {
  content: String!
  clipId: String!
}

type ClipHistory {
  id: String!
  clipId: String!
  userId: String!
  createdAt: String!
}

input ClipOrderByInput {
  name: ClipOrderName = clipCreatedAt
  type: String = "DESC"
}

enum ClipOrderName {
  clipCreatedAt
  clipReactionUpdatedAt
  communityClipCreatedAt
  clipHistoryUpdatedAt
  clipRating
}

type ClipReaction {
  id: String!
  type: ClipReactionType!
  clipId: String!
  userId: String!
  createdAt: String!
}

type ClipReactionStats {
  id: String!
  clipId: String!
  likes: Int!
  dislikes: Int!
  rating: Int!
  userId: String!
  createdAt: String!
}

enum ClipReactionType {
  like
  dislike
  none
}

type Clips {
  count: Float!
  clips: [Clip!]!
}

type Community {
  id: String!
  name: String!
  description: String
  avatar: String
  mainChatId: String!
  createdAt: String!
  costCreateClip: Float!
}

type CommunityClip {
  id: String!
  communityId: String!
  clipId: String!
  title: String!
  approved: Boolean!
  nfws: Boolean!
  spoiler: Boolean!
  authorId: String!
  deleted: Boolean!
  createdAt: String!
  updatedAt: String!
}

input CommunityClipCreateInput {
  communityId: String!
  clipId: String!
  title: String
  nfws: Boolean = false
  spoiler: Boolean = false
}

input CommunityCreateInput {
  name: String!
  description: String = ""
  avatar: String
}

type CommunityFollow {
  id: String!
  communityId: String!
  userId: String!
  follow: Boolean!
  createdAt: String!
  updatedAt: String!
}

type ConnectionsCount {
  unique: Int!
  users: Int!
}

enum CurrencyType {
  coin
  real
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  setUserProfileVisible(visible: Boolean!, id: ID!): Boolean!
  walletIncrementBalance(currency: CurrencyType, userId: ID, amount: Int!, walletId: ID): Boolean!
  walletDecrementBalance(currency: CurrencyType, userId: ID, amount: Int!, walletId: ID): Boolean!
  createChannelPromoter(channelName: String!): ChannelPromoter!
  deleteChannelPromoter(id: ID!): ChannelPromoter!
  setChannelPromoterActive(id: ID!, active: Boolean!): Boolean!
  setChannelPromoterCost(id: ID!, cost: Int!): Boolean!
  setClipReaction(clipId: String!, type: ClipReactionType!): Boolean!
  setClipHistory(clipId: ID!): Boolean!
  createClipComment(input: ClipCommentCreateInput!): Boolean!
  removeClipComment(id: ID!): Boolean!
  createCommunity(input: CommunityCreateInput!): Community!
  createChatMessage(input: ChatMessageCreateInput!): Boolean!
  deleteChatMessage(id: ID!): Boolean!
  setCommunityFollow(input: SetCommunityFollowInput!): CommunityFollow!
  createCommunityClip(input: CommunityClipCreateInput!): CommunityClip!
  removeCommunityClip(id: ID!): Boolean!
}

type Profile {
  id: ID!
  userId: ID!
  name: String!
  avatar: String!
  serviceName: String!
  serviceId: String!
  visible: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  user(id: ID): User
  usersTopByCoins: [UserTop!]!
  usersCount: Int!
  twitchProfileId: String
  refresh(refreshToken: String!): AuthTokens!
  wallet(where: WalletWhereInput): Wallet!
  connectionsCount: ConnectionsCount!
  twitchClip(id: String!): TwitchClipOld!
  twitchFollows(after: String, first: Int, from_id: String): TwitchFollows!
  twitchClips(ended_at: String, started_at: String, after: String, first: Int, game_id: String, broadcaster_id: String, id: String): TwitchClips!
  twitchGame(id: String, name: String): [TwitchGame!]!
  twitchTopGames(first: Int): [TwitchGame!]!
  twitchTopClips(channel: String, game: String, limit: Int): [TwitchClipOld!]!
  twitchStream(userId: String, userName: String): TwitchStream
  twitchUser(userId: String!): TwitchUser!
  channelsTop: [Channel!]!
  channel(where: ChannelWhereUniqueInput!): Channel!
  channelPromoter(where: ChannelPromoterWhereUniqueInput!): ChannelPromoter!
  channelPromoters: [ChannelPromoter!]!
  clips(orderBy: ClipOrderByInput = {name: clipCreatedAt, type: "DESC"}, startedAt: String, ratingMin: Int, likedUserId: String, communityId: String, collectionId: String, communityClipAuthorId: String, historyUserId: String, limit: Int = 25, offset: Int = 0): Clips
  clipReaction(clipId: ID!): ClipReaction
  clipReactionStats(clipId: ID!): ClipReactionStats
  clipComment(id: ID!): ClipComment!
  clipComments(clipId: ID): [ClipComment!]!
  community(id: ID!): Community!
  communities: [Community!]!
  chatMessages(chatId: ID!): [ChatMessage!]!
  communityFollowsCount(communityId: ID!): Int!
  communityFollow(userId: ID, communityId: ID!): CommunityFollow
  communityClipsCount: Int!
  clipIdByPostId(postId: ID!): String
  communityClip(id: ID!): CommunityClip!
}

input SetCommunityFollowInput {
  communityId: String!
  userId: String
  follow: Boolean!
}

type Subscription {
  wallet(id: ID!): Wallet!
  channel(id: ID!): Channel!
  channelPromoter(id: ID!): ChannelPromoter!
  channelPromoterCreated: ChannelPromoter!
  channelPromoterDeleted: ChannelPromoter!
  clipReaction(clipId: ID!): ClipReaction!
  clipReactionStats(clipId: ID!): ClipReactionStats!
  clipCommentCreated(clipId: ID!): ClipComment!
  clipCommentRemoved(clipId: ID!): ID!
  community(id: ID!): Community!
  chatMessageCreated(chatId: ID!): ChatMessage!
  chatMessageDeleted(chatId: ID!): ChatMessage!
  communityFollow(communityId: ID!): CommunityFollow!
  communityClip(id: ID!): CommunityClip!
}

type TwitchClip {
  id: String!
  url: String!
  embed_url: String!
  broadcaster_id: String!
  broadcaster_name: String!
  creator_id: String!
  creator_name: String!
  video_id: String!
  game_id: String!
  language: String!
  title: String!
  created_at: String!
  thumbnail_url: String!
  view_count: Int!
}

type TwitchClipBroadcaster {
  id: String!
  name: String!
  display_name: String!
  channel_url: String!
  logo: String!
}

type TwitchClipOld {
  id: String!
  slug: String!
  channel: String!
  title: String!
  createdAt: String!
  broadcaster: TwitchClipBroadcaster!
  thumbnails: TwitchClipThumbnails!
  viewsCount: Int!
}

type TwitchClips {
  data: [TwitchClip!]!
  pagination: TwitchPagination!
}

type TwitchClipThumbnails {
  medium: String!
  small: String!
  tiny: String!
}

type TwitchFollowData {
  from_id: String!
  from_name: String!
  to_id: String!
  to_name: String!
  followed_at: String!
}

type TwitchFollows {
  total: Int!
  data: [TwitchFollowData!]!
  pagination: TwitchPagination!
}

type TwitchGame {
  id: String!
  name: String!
  box_art_url: String!
}

type TwitchPagination {
  cursor: String
}

type TwitchStream {
  id: String!
  user_id: String!
  user_name: String!
  game_id: String!
  community_ids: [String!]!
  type: String!
  title: String!
  viewer_count: Int!
  started_at: String!
  language: String!
  thumbnail_url: String!
}

type TwitchUser {
  id: String!
  login: String!
  description: String!
  display_name: String!
  profile_image_url: String!
}

type User {
  id: ID!
  name: String
  avatar: String
  role: UserRole!
  banned: Boolean!
  mainProfileId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  user
  mod
  admin
}

type UserTop {
  id: ID!
  count: Float!
  user: User!
}

type Wallet {
  id: ID!
  balance: Int!
  currency: CurrencyType!
  userId: String!
  createdAt: String!
}

input WalletWhereInput {
  userId: ID
  currency: CurrencyType = coin
}
